// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: mwebd.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - Rpc

/// Namespace containing generated types for the "Rpc" service.
internal enum Rpc {
    /// Service descriptor for the "Rpc" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "Status" metadata.
        internal enum Status {
            /// Request type for "Status".
            internal typealias Input = StatusRequest
            /// Response type for "Status".
            internal typealias Output = StatusResponse
            /// Descriptor for "Status".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "Status"
            )
        }
        /// Namespace for "Utxos" metadata.
        internal enum Utxos {
            /// Request type for "Utxos".
            internal typealias Input = UtxosRequest
            /// Response type for "Utxos".
            internal typealias Output = Utxo
            /// Descriptor for "Utxos".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "Utxos"
            )
        }
        /// Namespace for "Addresses" metadata.
        internal enum Addresses {
            /// Request type for "Addresses".
            internal typealias Input = AddressRequest
            /// Response type for "Addresses".
            internal typealias Output = AddressResponse
            /// Descriptor for "Addresses".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "Addresses"
            )
        }
        /// Namespace for "Spent" metadata.
        internal enum Spent {
            /// Request type for "Spent".
            internal typealias Input = SpentRequest
            /// Response type for "Spent".
            internal typealias Output = SpentResponse
            /// Descriptor for "Spent".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "Spent"
            )
        }
        /// Namespace for "Create" metadata.
        internal enum Create {
            /// Request type for "Create".
            internal typealias Input = CreateRequest
            /// Response type for "Create".
            internal typealias Output = CreateResponse
            /// Descriptor for "Create".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "Create"
            )
        }
        /// Namespace for "LedgerExchange" metadata.
        internal enum LedgerExchange {
            /// Request type for "LedgerExchange".
            internal typealias Input = LedgerApdu
            /// Response type for "LedgerExchange".
            internal typealias Output = LedgerApdu
            /// Descriptor for "LedgerExchange".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "LedgerExchange"
            )
        }
        /// Namespace for "Broadcast" metadata.
        internal enum Broadcast {
            /// Request type for "Broadcast".
            internal typealias Input = BroadcastRequest
            /// Response type for "Broadcast".
            internal typealias Output = BroadcastResponse
            /// Descriptor for "Broadcast".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "Broadcast"
            )
        }
        /// Namespace for "Coinswap" metadata.
        internal enum Coinswap {
            /// Request type for "Coinswap".
            internal typealias Input = CoinswapRequest
            /// Response type for "Coinswap".
            internal typealias Output = CoinswapResponse
            /// Descriptor for "Coinswap".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc"),
                method: "Coinswap"
            )
        }
        /// Descriptors for all methods in the "Rpc" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Status.descriptor,
            Utxos.descriptor,
            Addresses.descriptor,
            Spent.descriptor,
            Create.descriptor,
            LedgerExchange.descriptor,
            Broadcast.descriptor,
            Coinswap.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "Rpc" service.
    internal static let Rpc = GRPCCore.ServiceDescriptor(fullyQualifiedService: "Rpc")
}

// MARK: Rpc (server)

extension Rpc {
    /// Streaming variant of the service protocol for the "Rpc" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the sync status of the daemon. The block headers are
        /// > synced first, followed by a subset of MWEB headers, and
        /// > finally the MWEB utxo set.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `StatusRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `StatusResponse` messages.
        func status(
            request: GRPCCore.StreamingServerRequest<StatusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<StatusResponse>

        /// Handle the "Utxos" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a continuous stream of unspent MWEB outputs (utxos)
        /// > for an account.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `UtxosRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Utxo` messages.
        func utxos(
            request: GRPCCore.StreamingServerRequest<UtxosRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Utxo>

        /// Handle the "Addresses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a batch of MWEB addresses for an account.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `AddressRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `AddressResponse` messages.
        func addresses(
            request: GRPCCore.StreamingServerRequest<AddressRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<AddressResponse>

        /// Handle the "Spent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Check whether MWEB outputs are in the unspent set or not.
        /// > This is used to determine when outputs have been spent by
        /// > either this or another wallet using the same seed, and to
        /// > determine when MWEB transactions have confirmed by checking
        /// > the output IDs of the MWEB inputs and outputs.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `SpentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SpentResponse` messages.
        func spent(
            request: GRPCCore.StreamingServerRequest<SpentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SpentResponse>

        /// Handle the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create the MWEB portion of a transaction.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `CreateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `CreateResponse` messages.
        func create(
            request: GRPCCore.StreamingServerRequest<CreateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<CreateResponse>

        /// Handle the "LedgerExchange" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Process APDUs from the Ledger.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `LedgerApdu` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `LedgerApdu` messages.
        func ledgerExchange(
            request: GRPCCore.StreamingServerRequest<LedgerApdu>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<LedgerApdu>

        /// Handle the "Broadcast" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Broadcast a transaction to the network. This is provided as
        /// > existing broadcast services may not support MWEB transactions.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `BroadcastRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `BroadcastResponse` messages.
        func broadcast(
            request: GRPCCore.StreamingServerRequest<BroadcastRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<BroadcastResponse>

        /// Handle the "Coinswap" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Submit a coinswap request.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `CoinswapRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `CoinswapResponse` messages.
        func coinswap(
            request: GRPCCore.StreamingServerRequest<CoinswapRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<CoinswapResponse>
    }

    /// Service protocol for the "Rpc" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Rpc.StreamingServiceProtocol {
        /// Handle the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the sync status of the daemon. The block headers are
        /// > synced first, followed by a subset of MWEB headers, and
        /// > finally the MWEB utxo set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `StatusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `StatusResponse` message.
        func status(
            request: GRPCCore.ServerRequest<StatusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<StatusResponse>

        /// Handle the "Utxos" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a continuous stream of unspent MWEB outputs (utxos)
        /// > for an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UtxosRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Utxo` messages.
        func utxos(
            request: GRPCCore.ServerRequest<UtxosRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Utxo>

        /// Handle the "Addresses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a batch of MWEB addresses for an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AddressRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `AddressResponse` message.
        func addresses(
            request: GRPCCore.ServerRequest<AddressRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<AddressResponse>

        /// Handle the "Spent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Check whether MWEB outputs are in the unspent set or not.
        /// > This is used to determine when outputs have been spent by
        /// > either this or another wallet using the same seed, and to
        /// > determine when MWEB transactions have confirmed by checking
        /// > the output IDs of the MWEB inputs and outputs.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SpentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SpentResponse` message.
        func spent(
            request: GRPCCore.ServerRequest<SpentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SpentResponse>

        /// Handle the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create the MWEB portion of a transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CreateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `CreateResponse` message.
        func create(
            request: GRPCCore.ServerRequest<CreateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<CreateResponse>

        /// Handle the "LedgerExchange" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Process APDUs from the Ledger.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LedgerApdu` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `LedgerApdu` message.
        func ledgerExchange(
            request: GRPCCore.ServerRequest<LedgerApdu>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<LedgerApdu>

        /// Handle the "Broadcast" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Broadcast a transaction to the network. This is provided as
        /// > existing broadcast services may not support MWEB transactions.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BroadcastRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `BroadcastResponse` message.
        func broadcast(
            request: GRPCCore.ServerRequest<BroadcastRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<BroadcastResponse>

        /// Handle the "Coinswap" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Submit a coinswap request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CoinswapRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `CoinswapResponse` message.
        func coinswap(
            request: GRPCCore.ServerRequest<CoinswapRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<CoinswapResponse>
    }

    /// Simple service protocol for the "Rpc" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Rpc.ServiceProtocol {
        /// Handle the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the sync status of the daemon. The block headers are
        /// > synced first, followed by a subset of MWEB headers, and
        /// > finally the MWEB utxo set.
        ///
        /// - Parameters:
        ///   - request: A `StatusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `StatusResponse` to respond with.
        func status(
            request: StatusRequest,
            context: GRPCCore.ServerContext
        ) async throws -> StatusResponse

        /// Handle the "Utxos" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a continuous stream of unspent MWEB outputs (utxos)
        /// > for an account.
        ///
        /// - Parameters:
        ///   - request: A `UtxosRequest` message.
        ///   - response: A response stream of `Utxo` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func utxos(
            request: UtxosRequest,
            response: GRPCCore.RPCWriter<Utxo>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "Addresses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a batch of MWEB addresses for an account.
        ///
        /// - Parameters:
        ///   - request: A `AddressRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `AddressResponse` to respond with.
        func addresses(
            request: AddressRequest,
            context: GRPCCore.ServerContext
        ) async throws -> AddressResponse

        /// Handle the "Spent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Check whether MWEB outputs are in the unspent set or not.
        /// > This is used to determine when outputs have been spent by
        /// > either this or another wallet using the same seed, and to
        /// > determine when MWEB transactions have confirmed by checking
        /// > the output IDs of the MWEB inputs and outputs.
        ///
        /// - Parameters:
        ///   - request: A `SpentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SpentResponse` to respond with.
        func spent(
            request: SpentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SpentResponse

        /// Handle the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create the MWEB portion of a transaction.
        ///
        /// - Parameters:
        ///   - request: A `CreateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `CreateResponse` to respond with.
        func create(
            request: CreateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> CreateResponse

        /// Handle the "LedgerExchange" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Process APDUs from the Ledger.
        ///
        /// - Parameters:
        ///   - request: A `LedgerApdu` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `LedgerApdu` to respond with.
        func ledgerExchange(
            request: LedgerApdu,
            context: GRPCCore.ServerContext
        ) async throws -> LedgerApdu

        /// Handle the "Broadcast" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Broadcast a transaction to the network. This is provided as
        /// > existing broadcast services may not support MWEB transactions.
        ///
        /// - Parameters:
        ///   - request: A `BroadcastRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `BroadcastResponse` to respond with.
        func broadcast(
            request: BroadcastRequest,
            context: GRPCCore.ServerContext
        ) async throws -> BroadcastResponse

        /// Handle the "Coinswap" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Submit a coinswap request.
        ///
        /// - Parameters:
        ///   - request: A `CoinswapRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `CoinswapResponse` to respond with.
        func coinswap(
            request: CoinswapRequest,
            context: GRPCCore.ServerContext
        ) async throws -> CoinswapResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Rpc.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Rpc.Method.Status.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<StatusRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<StatusResponse>(),
            handler: { request, context in
                try await self.status(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Rpc.Method.Utxos.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<UtxosRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Utxo>(),
            handler: { request, context in
                try await self.utxos(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Rpc.Method.Addresses.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<AddressRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<AddressResponse>(),
            handler: { request, context in
                try await self.addresses(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Rpc.Method.Spent.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<SpentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SpentResponse>(),
            handler: { request, context in
                try await self.spent(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Rpc.Method.Create.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<CreateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<CreateResponse>(),
            handler: { request, context in
                try await self.create(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Rpc.Method.LedgerExchange.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<LedgerApdu>(),
            serializer: GRPCProtobuf.ProtobufSerializer<LedgerApdu>(),
            handler: { request, context in
                try await self.ledgerExchange(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Rpc.Method.Broadcast.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<BroadcastRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<BroadcastResponse>(),
            handler: { request, context in
                try await self.broadcast(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Rpc.Method.Coinswap.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<CoinswapRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<CoinswapResponse>(),
            handler: { request, context in
                try await self.coinswap(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Rpc.ServiceProtocol {
    internal func status(
        request: GRPCCore.StreamingServerRequest<StatusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<StatusResponse> {
        let response = try await self.status(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func utxos(
        request: GRPCCore.StreamingServerRequest<UtxosRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Utxo> {
        let response = try await self.utxos(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func addresses(
        request: GRPCCore.StreamingServerRequest<AddressRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<AddressResponse> {
        let response = try await self.addresses(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func spent(
        request: GRPCCore.StreamingServerRequest<SpentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SpentResponse> {
        let response = try await self.spent(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func create(
        request: GRPCCore.StreamingServerRequest<CreateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<CreateResponse> {
        let response = try await self.create(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func ledgerExchange(
        request: GRPCCore.StreamingServerRequest<LedgerApdu>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<LedgerApdu> {
        let response = try await self.ledgerExchange(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func broadcast(
        request: GRPCCore.StreamingServerRequest<BroadcastRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<BroadcastResponse> {
        let response = try await self.broadcast(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func coinswap(
        request: GRPCCore.StreamingServerRequest<CoinswapRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<CoinswapResponse> {
        let response = try await self.coinswap(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Rpc.SimpleServiceProtocol {
    internal func status(
        request: GRPCCore.ServerRequest<StatusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<StatusResponse> {
        return GRPCCore.ServerResponse<StatusResponse>(
            message: try await self.status(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func utxos(
        request: GRPCCore.ServerRequest<UtxosRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Utxo> {
        return GRPCCore.StreamingServerResponse<Utxo>(
            metadata: [:],
            producer: { writer in
                try await self.utxos(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func addresses(
        request: GRPCCore.ServerRequest<AddressRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<AddressResponse> {
        return GRPCCore.ServerResponse<AddressResponse>(
            message: try await self.addresses(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func spent(
        request: GRPCCore.ServerRequest<SpentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SpentResponse> {
        return GRPCCore.ServerResponse<SpentResponse>(
            message: try await self.spent(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func create(
        request: GRPCCore.ServerRequest<CreateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<CreateResponse> {
        return GRPCCore.ServerResponse<CreateResponse>(
            message: try await self.create(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func ledgerExchange(
        request: GRPCCore.ServerRequest<LedgerApdu>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<LedgerApdu> {
        return GRPCCore.ServerResponse<LedgerApdu>(
            message: try await self.ledgerExchange(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func broadcast(
        request: GRPCCore.ServerRequest<BroadcastRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<BroadcastResponse> {
        return GRPCCore.ServerResponse<BroadcastResponse>(
            message: try await self.broadcast(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func coinswap(
        request: GRPCCore.ServerRequest<CoinswapRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<CoinswapResponse> {
        return GRPCCore.ServerResponse<CoinswapResponse>(
            message: try await self.coinswap(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: Rpc (client)

extension Rpc {
    /// Generated client protocol for the "Rpc" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the sync status of the daemon. The block headers are
        /// > synced first, followed by a subset of MWEB headers, and
        /// > finally the MWEB utxo set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `StatusRequest` message.
        ///   - serializer: A serializer for `StatusRequest` messages.
        ///   - deserializer: A deserializer for `StatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func status<Result>(
            request: GRPCCore.ClientRequest<StatusRequest>,
            serializer: some GRPCCore.MessageSerializer<StatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<StatusResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<StatusResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Utxos" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a continuous stream of unspent MWEB outputs (utxos)
        /// > for an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UtxosRequest` message.
        ///   - serializer: A serializer for `UtxosRequest` messages.
        ///   - deserializer: A deserializer for `Utxo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func utxos<Result>(
            request: GRPCCore.ClientRequest<UtxosRequest>,
            serializer: some GRPCCore.MessageSerializer<UtxosRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Utxo>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Utxo>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Addresses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a batch of MWEB addresses for an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AddressRequest` message.
        ///   - serializer: A serializer for `AddressRequest` messages.
        ///   - deserializer: A deserializer for `AddressResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addresses<Result>(
            request: GRPCCore.ClientRequest<AddressRequest>,
            serializer: some GRPCCore.MessageSerializer<AddressRequest>,
            deserializer: some GRPCCore.MessageDeserializer<AddressResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AddressResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Spent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Check whether MWEB outputs are in the unspent set or not.
        /// > This is used to determine when outputs have been spent by
        /// > either this or another wallet using the same seed, and to
        /// > determine when MWEB transactions have confirmed by checking
        /// > the output IDs of the MWEB inputs and outputs.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SpentRequest` message.
        ///   - serializer: A serializer for `SpentRequest` messages.
        ///   - deserializer: A deserializer for `SpentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func spent<Result>(
            request: GRPCCore.ClientRequest<SpentRequest>,
            serializer: some GRPCCore.MessageSerializer<SpentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SpentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SpentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create the MWEB portion of a transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CreateRequest` message.
        ///   - serializer: A serializer for `CreateRequest` messages.
        ///   - deserializer: A deserializer for `CreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<CreateRequest>,
            serializer: some GRPCCore.MessageSerializer<CreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CreateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CreateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "LedgerExchange" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Process APDUs from the Ledger.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LedgerApdu` message.
        ///   - serializer: A serializer for `LedgerApdu` messages.
        ///   - deserializer: A deserializer for `LedgerApdu` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func ledgerExchange<Result>(
            request: GRPCCore.ClientRequest<LedgerApdu>,
            serializer: some GRPCCore.MessageSerializer<LedgerApdu>,
            deserializer: some GRPCCore.MessageDeserializer<LedgerApdu>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<LedgerApdu>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Broadcast" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Broadcast a transaction to the network. This is provided as
        /// > existing broadcast services may not support MWEB transactions.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BroadcastRequest` message.
        ///   - serializer: A serializer for `BroadcastRequest` messages.
        ///   - deserializer: A deserializer for `BroadcastResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func broadcast<Result>(
            request: GRPCCore.ClientRequest<BroadcastRequest>,
            serializer: some GRPCCore.MessageSerializer<BroadcastRequest>,
            deserializer: some GRPCCore.MessageDeserializer<BroadcastResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BroadcastResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Coinswap" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Submit a coinswap request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CoinswapRequest` message.
        ///   - serializer: A serializer for `CoinswapRequest` messages.
        ///   - deserializer: A deserializer for `CoinswapResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func coinswap<Result>(
            request: GRPCCore.ClientRequest<CoinswapRequest>,
            serializer: some GRPCCore.MessageSerializer<CoinswapRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CoinswapResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CoinswapResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "Rpc" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the sync status of the daemon. The block headers are
        /// > synced first, followed by a subset of MWEB headers, and
        /// > finally the MWEB utxo set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `StatusRequest` message.
        ///   - serializer: A serializer for `StatusRequest` messages.
        ///   - deserializer: A deserializer for `StatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func status<Result>(
            request: GRPCCore.ClientRequest<StatusRequest>,
            serializer: some GRPCCore.MessageSerializer<StatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<StatusResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<StatusResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Rpc.Method.Status.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Utxos" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a continuous stream of unspent MWEB outputs (utxos)
        /// > for an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `UtxosRequest` message.
        ///   - serializer: A serializer for `UtxosRequest` messages.
        ///   - deserializer: A deserializer for `Utxo` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func utxos<Result>(
            request: GRPCCore.ClientRequest<UtxosRequest>,
            serializer: some GRPCCore.MessageSerializer<UtxosRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Utxo>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Utxo>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Rpc.Method.Utxos.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Addresses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get a batch of MWEB addresses for an account.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `AddressRequest` message.
        ///   - serializer: A serializer for `AddressRequest` messages.
        ///   - deserializer: A deserializer for `AddressResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func addresses<Result>(
            request: GRPCCore.ClientRequest<AddressRequest>,
            serializer: some GRPCCore.MessageSerializer<AddressRequest>,
            deserializer: some GRPCCore.MessageDeserializer<AddressResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AddressResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Rpc.Method.Addresses.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Spent" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Check whether MWEB outputs are in the unspent set or not.
        /// > This is used to determine when outputs have been spent by
        /// > either this or another wallet using the same seed, and to
        /// > determine when MWEB transactions have confirmed by checking
        /// > the output IDs of the MWEB inputs and outputs.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `SpentRequest` message.
        ///   - serializer: A serializer for `SpentRequest` messages.
        ///   - deserializer: A deserializer for `SpentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func spent<Result>(
            request: GRPCCore.ClientRequest<SpentRequest>,
            serializer: some GRPCCore.MessageSerializer<SpentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SpentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SpentResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Rpc.Method.Spent.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create the MWEB portion of a transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CreateRequest` message.
        ///   - serializer: A serializer for `CreateRequest` messages.
        ///   - deserializer: A deserializer for `CreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func create<Result>(
            request: GRPCCore.ClientRequest<CreateRequest>,
            serializer: some GRPCCore.MessageSerializer<CreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CreateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CreateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Rpc.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "LedgerExchange" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Process APDUs from the Ledger.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `LedgerApdu` message.
        ///   - serializer: A serializer for `LedgerApdu` messages.
        ///   - deserializer: A deserializer for `LedgerApdu` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func ledgerExchange<Result>(
            request: GRPCCore.ClientRequest<LedgerApdu>,
            serializer: some GRPCCore.MessageSerializer<LedgerApdu>,
            deserializer: some GRPCCore.MessageDeserializer<LedgerApdu>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<LedgerApdu>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Rpc.Method.LedgerExchange.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Broadcast" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Broadcast a transaction to the network. This is provided as
        /// > existing broadcast services may not support MWEB transactions.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `BroadcastRequest` message.
        ///   - serializer: A serializer for `BroadcastRequest` messages.
        ///   - deserializer: A deserializer for `BroadcastResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func broadcast<Result>(
            request: GRPCCore.ClientRequest<BroadcastRequest>,
            serializer: some GRPCCore.MessageSerializer<BroadcastRequest>,
            deserializer: some GRPCCore.MessageDeserializer<BroadcastResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BroadcastResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Rpc.Method.Broadcast.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Coinswap" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Submit a coinswap request.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `CoinswapRequest` message.
        ///   - serializer: A serializer for `CoinswapRequest` messages.
        ///   - deserializer: A deserializer for `CoinswapResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func coinswap<Result>(
            request: GRPCCore.ClientRequest<CoinswapRequest>,
            serializer: some GRPCCore.MessageSerializer<CoinswapRequest>,
            deserializer: some GRPCCore.MessageDeserializer<CoinswapResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CoinswapResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Rpc.Method.Coinswap.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Rpc.ClientProtocol {
    /// Call the "Status" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the sync status of the daemon. The block headers are
    /// > synced first, followed by a subset of MWEB headers, and
    /// > finally the MWEB utxo set.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `StatusRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func status<Result>(
        request: GRPCCore.ClientRequest<StatusRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<StatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.status(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<StatusRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<StatusResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Utxos" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a continuous stream of unspent MWEB outputs (utxos)
    /// > for an account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `UtxosRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func utxos<Result>(
        request: GRPCCore.ClientRequest<UtxosRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Utxo>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.utxos(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<UtxosRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Utxo>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Addresses" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a batch of MWEB addresses for an account.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `AddressRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func addresses<Result>(
        request: GRPCCore.ClientRequest<AddressRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AddressResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addresses(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<AddressRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<AddressResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Spent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Check whether MWEB outputs are in the unspent set or not.
    /// > This is used to determine when outputs have been spent by
    /// > either this or another wallet using the same seed, and to
    /// > determine when MWEB transactions have confirmed by checking
    /// > the output IDs of the MWEB inputs and outputs.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `SpentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func spent<Result>(
        request: GRPCCore.ClientRequest<SpentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SpentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.spent(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<SpentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SpentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Create" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create the MWEB portion of a transaction.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `CreateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func create<Result>(
        request: GRPCCore.ClientRequest<CreateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<CreateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<CreateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LedgerExchange" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Process APDUs from the Ledger.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `LedgerApdu` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func ledgerExchange<Result>(
        request: GRPCCore.ClientRequest<LedgerApdu>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<LedgerApdu>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.ledgerExchange(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<LedgerApdu>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<LedgerApdu>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Broadcast" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Broadcast a transaction to the network. This is provided as
    /// > existing broadcast services may not support MWEB transactions.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `BroadcastRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func broadcast<Result>(
        request: GRPCCore.ClientRequest<BroadcastRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BroadcastResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.broadcast(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<BroadcastRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<BroadcastResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Coinswap" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Submit a coinswap request.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `CoinswapRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func coinswap<Result>(
        request: GRPCCore.ClientRequest<CoinswapRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CoinswapResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.coinswap(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<CoinswapRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<CoinswapResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Rpc.ClientProtocol {
    /// Call the "Status" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the sync status of the daemon. The block headers are
    /// > synced first, followed by a subset of MWEB headers, and
    /// > finally the MWEB utxo set.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func status<Result>(
        _ message: StatusRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<StatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<StatusRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.status(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Utxos" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a continuous stream of unspent MWEB outputs (utxos)
    /// > for an account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func utxos<Result>(
        _ message: UtxosRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Utxo>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<UtxosRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.utxos(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Addresses" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get a batch of MWEB addresses for an account.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func addresses<Result>(
        _ message: AddressRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<AddressResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<AddressRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addresses(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Spent" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Check whether MWEB outputs are in the unspent set or not.
    /// > This is used to determine when outputs have been spent by
    /// > either this or another wallet using the same seed, and to
    /// > determine when MWEB transactions have confirmed by checking
    /// > the output IDs of the MWEB inputs and outputs.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func spent<Result>(
        _ message: SpentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SpentResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<SpentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.spent(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Create" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create the MWEB portion of a transaction.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func create<Result>(
        _ message: CreateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<CreateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "LedgerExchange" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Process APDUs from the Ledger.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func ledgerExchange<Result>(
        _ message: LedgerApdu,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<LedgerApdu>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<LedgerApdu>(
            message: message,
            metadata: metadata
        )
        return try await self.ledgerExchange(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Broadcast" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Broadcast a transaction to the network. This is provided as
    /// > existing broadcast services may not support MWEB transactions.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func broadcast<Result>(
        _ message: BroadcastRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<BroadcastResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<BroadcastRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.broadcast(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Coinswap" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Submit a coinswap request.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func coinswap<Result>(
        _ message: CoinswapRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<CoinswapResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<CoinswapRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.coinswap(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}